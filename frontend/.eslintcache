[{"/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/index.tsx":"1","/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/App.tsx":"2","/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/components/SongRec.tsx":"3","/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/components/SongForm.tsx":"4"},{"size":607,"mtime":1609189133204,"results":"5","hashOfConfig":"6"},{"size":15378,"mtime":1609380497361,"results":"7","hashOfConfig":"6"},{"size":394,"mtime":1609191153387,"results":"8","hashOfConfig":"6"},{"size":2518,"mtime":1609380391697,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2yrpk3",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/index.tsx",[],"/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/App.tsx",["19","20","21","22"],"import React, { useEffect, useState } from 'react';\nimport logo from './assets/spotify.png';\nimport tracks from './assets/tracks.png';\nimport './App.css';\nimport SongForm from './components/SongForm';\nimport SongRecs from './components/SongRecs';\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth';\nimport { SpotifyApiContext, Track } from 'react-spotify-api';\nimport Cookies from 'js-cookie';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport Fade from 'react-bootstrap/Fade';\n\n\nfunction App() {\n\n  const token = Cookies.get('spotifyAuthToken');\n  const [userId, setUserId] = useState(\"\");\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const [newPlaylistName, setNewPlaylistName] = useState(\"\");\n  const [aveAudioFeatures, setAveAudioFeatures] = useState({});\n  const [trackRecs, setTrackRecs] = useState<any[]>([]);\n  const [playlistId, setPlaylistId] = useState(\"\");\n  const [isUpdated, setIsUpdated] = useState(false);\n  const [hasNameError, setHasNameError] = useState(false);\n  const [nameError, setNameError] = useState(\"\");\n  const [hasToken, setHasToken] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showForm, setShowForm] = useState(true);\n\n  useEffect(() => {\n    if (trackRecs.length !== 0) {\n      setIsUpdated(true);\n      setShowForm(false);\n    }\n  }, [trackRecs]);\n\n  const onAuth = () => {\n    setHasToken(true);\n  }\n\n  const updateLoading = () => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000)\n  }\n\n  /** Defines the type of a Spotify artist object. */\n  type Artist = {\n    external_urls: any,\n    href: string,\n    id: string,\n    name: string,\n    type: string,\n    uri: string\n  }\n\n  /** Defines the type of a Spotify track object. */\n  type Track = {\n    album: any,\n    artists: Artist[],\n    available_markets: string[],\n    disc_number: number,\n    duration_ms: number,\n    explicit: boolean,\n    external_ids: any,\n    external_urls: any,\n    href: string,\n    id: string,\n    is_playable: boolean,\n    linked_from: any,\n    restrictions: any,\n    name: string,\n    popularity: number,\n    preview_url: string,\n    track_number: number,\n    type: string,\n    uri: string\n  }\n\n  /** Defines the type of a Spotify playlist object. */\n  type Playlist = {\n    collaborative: boolean,\n    description: string,\n    external_urls: any,\n    href: string,\n    id: string,\n    images: any,\n    name: string,\n    owner: any,\n    public: boolean | null,\n    snapshot_id: string,\n    tracks: Track[],\n    type: string,\n    uri: string\n  }\n\n  /** Defines the type of a Spotify playlist track object. */\n  type PlaylistTrack = {\n    added_at: any,\n    added_by: any,\n    is_local: boolean,\n    track: Track\n  }\n\n  /** Defines the type of a Spotify audio features object. */\n  type AudioFeatures = {\n    duration_ms: number,\n    key: number,\n    mode: number,\n    time_signature: number,\n    acousticness: number,\n    danceability: number,\n    energy: number,\n    instrumentalness: number,\n    liveness: number,\n    loudness: number,\n    speechiness: number,\n    valence: number,\n    tempo: number,\n    id: string,\n    uri: string,\n    track_href: string,\n    analysis_url: string,\n    type: string\n  }\n\n  type SimpleAudioFeatures = {\n    duration: number,\n    key: number,\n    mode: number,\n    timeSig: number,\n    acousticness: number,\n    danceability: number,\n    energy: number,\n    instrumentalness: number,\n    liveness: number,\n    loudness: number,\n    speechiness: number,\n    valence: number,\n    tempo: number\n  }\n\n  /** Get playlists by user ID. \n   * \n   * Returns a max of 50 playlists as an array of Playlist objects.\n  */\n  const getPlaylistsById = async (userId: string) => {\n    return await fetch(`https://api.spotify.com/v1/users/${userId}/playlists?limit=50`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token,\n          'Accept': 'application/x-www-form-urlencoded; application/json',\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(json => { return json.items })\n      .catch(error => console.log(`Error getting playlists by user id (${userId}): ${error}`));\n  }\n\n  /** Get playlist id by playlist name.\n   * \n   * Filters through a user's playlists (max 50 playlists) and returns the \n   * id of the first one matching [name]. Raises exception if no such playlist \n   * exists.\n   */\n  const getPlaylistIdByName = (userId: string, name: string, playlists: Playlist[]) => {\n    const playlistArr: Playlist[] = playlists.filter(playlist => playlist.name === name)\n    if (playlistArr.length === 0) {\n      throw new Error(`The playlist '${name}' does not exist in '${userId}'s' library.`)\n    }\n    else {\n      return playlistArr[0].id;\n    }\n  }\n\n  /** Get full details of the tracks in a playlist by playlist id. \n   * \n   * Returns a max of 100 tracks as an array of Track objects. \n  */\n  const getTracksByPlaylistId = async (id: string): Promise<Track[]> => {\n    return await fetch(`https://api.spotify.com/v1/playlists/${id}/tracks?limit=50`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(json => json.items)\n      .then((playlistTracks: PlaylistTrack[]) => playlistTracks.map(\n        (playlistTrack: PlaylistTrack) => playlistTrack.track)\n      )\n      .then(tracks => { return tracks })\n      .catch(error => {\n        console.log(`Error getting tracks by playlist id (${id}): ${error}`);\n        return error;\n      })\n\n  }\n\n  /** Get audio feature information for a track by track id.\n   * \n   * Returns information as an AudioFeature object.\n   */\n  const getAudioFeaturesByTrackId = async (id: string): Promise<AudioFeatures> => {\n    return await fetch(`https://api.spotify.com/v1/audio-features/${id}`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      }\n    )\n      .then(res => res.json())\n      .catch(error => console.log(`Error getting audio features by track id (${id}): ${error}`))\n  }\n\n  /** Get the following mean audio features for an array of Audio Feature \n   * objects: duration, key, mode, time signature, acousticness, danceability, \n   * energy, instrumentalness, liveness, loudness, speechiness, valence, \n   * and tempo. \n   * \n   * Returns information as a single JSON object.\n   *  */\n  const getMeanAudioFeatures = async (objs: Promise<AudioFeatures>[]) => {\n    const result: SimpleAudioFeatures = {\n      duration: 0,\n      key: 0,\n      mode: 0,\n      timeSig: 0,\n      acousticness: 0,\n      danceability: 0,\n      energy: 0,\n      instrumentalness: 0,\n      liveness: 0,\n      loudness: 0,\n      speechiness: 0,\n      valence: 0,\n      tempo: 0\n    }\n\n    for (let obj of objs) {\n      for (let k in result) {\n\n        if (await obj !== undefined) {\n          let value = (await obj)[k];\n          if (value === undefined) { value = 0 }\n          result[k] += value;\n        }\n\n      }\n    }\n\n    for (let k in result) {\n      let len = objs.length;\n      result[k] = result[k] / len;\n    }\n\n    return result;\n\n  }\n\n  /** Randomly selects 5 tracks from an array of Track objects and returns \n   * a string array of their ids.\n   * \n   * Requires: [tracks] is an array of size >= 5.\n   */\n  const generateTrackSeeds = (tracks: Track[]) => {\n    const result: string[] = []\n    for (let i = 0; i < 5; i++) {\n      let num = Math.floor(Math.random() * 5);\n      result.push(tracks[num].id)\n    }\n    return result;\n  }\n\n  /** Get recommended tracks based on 5 seed tracks and audio features. \n   * \n   * Returns an array of objects representing the recommended tracks. \n  */\n  const getTrackRecs = async (seeds: string[],\n    features: { [key: string]: number }) => {\n    return await fetch(`https://api.spotify.com/v1/recommendations?seed_tracks=${seeds[0]},${seeds[1]},${seeds[2]},${seeds[3]},${seeds[4]}&acousticness=${features.acousticness}&danceability=${features.danceability}&duration_ms=${features.duration}&energy=${features.energy}&instrumentalness=${features.instrumentalness}&key=${features.key}&liveness=${features.liveness}&loudness=${features.loudness}&mode=${features.mode}&speechiness=${features.speechiness}&tempo=${features.tempo}&time_signature=${features.timeSig}&valence=${features.valence}`,\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(json => json.tracks)\n      .then((tracks: Track[]) => {\n        return tracks.map((track: Track) => ({\n          id: track.id,\n          name: track.name,\n          uri: track.uri,\n          artist: track.artists[0]\n        }))\n      })\n      .catch(error => {\n        console.log(`Error getting track recommendations: ${error}`);\n        return error;\n      })\n  }\n\n  /** Create a new playlist with no tracks for a Spotify user by user id.\n   * \n   * Returns the id of the new playlist.\n   */\n  const createPlaylistByUserId = async (id: string, requestBody: any) => {\n    return await fetch(`https://api.spotify.com/v1/users/${id}/playlists`,\n      {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        },\n        body: JSON.stringify(requestBody)\n      }\n    )\n      .then(res => res.json())\n      .then(json => json.id)\n      .catch(error => console.log(`Error creating playlist by user id (${id}): ${error}`))\n  }\n\n  /** Add tracks to a playlist using the playlist id.\n   * \n   * Returns a snapshot id of the playlist after it has been updated. \n   */\n  const addTracksToPlaylist = async (id: string, requestBody: any) => {\n    return await fetch(`https://api.spotify.com/v1/playlists/${id}/tracks`,\n      {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Authorization': \"Bearer \" + token\n        },\n        body: JSON.stringify(requestBody)\n      }\n    )\n      .then(res => res.json())\n      .catch(error => console.log(`Error adding tracks to playlist by id (${id}): ${error}`))\n  }\n\n  /** Handles form submission. \n   * \n   * Creates a new playlist for the user with id [userId]. The new playlist is \n   * populated with recommendations based on an existing playlist with name \n   * [playlistName] and description [description]. Updates the page to show a \n   * few of the recommended tracks.\n  */\n  const handleSubmit = async (id: string, name: string, newName: string) => {\n    setIsLoading(true);\n    updateLoading();\n    setUserId(id);\n    setPlaylistName(name);\n    setNewPlaylistName(newName);\n\n    // find id of the playlist\n\n    try {\n      const currentPlaylists = await getPlaylistsById(id);\n      setHasNameError(false);\n      const playlistId: string = getPlaylistIdByName(id, name, currentPlaylists);\n      setPlaylistId(playlistId);\n      const playlistTracks = await getTracksByPlaylistId(playlistId);\n\n      // get audio features\n      const audioFeatures = playlistTracks.map(async track => {\n        return await getAudioFeaturesByTrackId(track.id);\n      });\n\n      const features = getMeanAudioFeatures(audioFeatures);\n      setAveAudioFeatures(features);\n\n      // get seeds and recs\n      const trackSeeds = generateTrackSeeds(playlistTracks);\n      const recs = await getTrackRecs(trackSeeds, await features);\n      setTrackRecs(recs);\n\n      // create new playlist and populate it\n      const newPlaylistInfo = {\n        name: newName,\n        description: \"Created just for you!\"\n      }\n      const newPlaylistId = await createPlaylistByUserId(id, newPlaylistInfo);\n      const uriArr: string[] = recs.map((rec: any) => { return rec.uri });\n      const newPlaylistTracks = {\n        uris: uriArr\n      }\n      await addTracksToPlaylist(newPlaylistId, newPlaylistTracks);\n    }\n    catch (error) {\n      setNameError(error);\n      setHasNameError(true);\n      setIsLoading(false);\n    }\n\n  }\n\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"main\">\n        <img className=\"logo\" src={logo} alt=\"Spotify logo\" />\n        <h1 className=\"title\">Spotify Playlist Generator</h1>\n\n        <p>Tired of listening to the same songs? Use this playlist generator to\n        get a brand new playlist of songs recommended just for you based on\n        the songs in one of your current playlists. Just type in your Spotify\n        username, the name of the playlist* you want your recommendations based on,\n        and the name of your new playlist. Then check your Spotify library\n        to start listening!\n          </p>\n        <p>* The playlist must have at least 5 tracks.</p>\n\n        {/* Display loading screen */}\n        {isLoading ? (\n          <div>\n            <div className=\"divider\"></div>\n            <Spinner animation=\"border\" className=\"spinner\" />\n            <h3>Generating an amazing playlist for you!</h3>\n          </div>\n\n        ) : (\n            <div>\n              {hasToken ? (\n\n                <SpotifyApiContext.Provider value={token}>\n\n                  {showForm ? (\n                    <div>\n                      <SongForm callbackSubmit={handleSubmit} setUserId={setUserId}\n                        setPlaylistName={setPlaylistName} setNewPlaylistName={setNewPlaylistName}\n                        userId={userId} playlistName={playlistName}\n                        newPlaylistName={newPlaylistName} />\n\n                      {/* Some error */}\n                      {hasNameError &&\n                        <div className=\"error\">\n                          {`${nameError} Please enter the name of one of your current playlists.`}\n                        </div>}\n\n                    </div>\n\n                  ) : (\n                      <div>\n                        {/* Have recommendations */}\n                        {isUpdated &&\n                          <Fade in={isUpdated}>\n                            <div>\n                              <div className=\"divider\"></div>\n                              <h3>Your Recommendations</h3>\n                              <SongRecs songRecs={trackRecs} />\n                              <Button className=\"playlist-button\" variant=\"success\"\n                                onClick={() => setShowForm(true)}>\n                                Create Another Playlist!\n                              </Button>\n                            </div>\n                          </Fade>}\n                      </div>\n\n\n                    )}\n\n                </SpotifyApiContext.Provider>\n              ) : (\n                  // Display the login page\n                  <div className=\"auth\">\n                    <SpotifyAuth\n                      redirectUri='http://localhost:3000/callback'\n                      clientID='1a70ba777fec4ffd9633c0c418bdcf39'\n                      title='Login with Spotify'\n                      onAccessToken={onAuth}\n                      scopes={[Scopes.userReadPrivate, 'user-read-email', 'playlist-modify-public']} // either style will work\n                    />\n                  </div>\n                )}\n            </div>\n          )}\n\n\n      </div>\n    </div>\n  );\n\n\n}\n\nexport default App;\n","/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/components/SongRec.tsx",[],"/Users/samliu/Desktop/CS_Stuff/spotify/frontend/src/components/SongForm.tsx",[],{"ruleId":"23","severity":1,"message":"24","line":3,"column":8,"nodeType":"25","messageId":"26","endLine":3,"endColumn":14},{"ruleId":"23","severity":1,"message":"27","line":8,"column":29,"nodeType":"25","messageId":"26","endLine":8,"endColumn":34},{"ruleId":"23","severity":1,"message":"28","line":21,"column":10,"nodeType":"25","messageId":"26","endLine":21,"endColumn":26},{"ruleId":"23","severity":1,"message":"29","line":23,"column":10,"nodeType":"25","messageId":"26","endLine":23,"endColumn":20},"@typescript-eslint/no-unused-vars","'tracks' is defined but never used.","Identifier","unusedVar","'Track' is defined but never used.","'aveAudioFeatures' is assigned a value but never used.","'playlistId' is assigned a value but never used."]